name: Check PostHog Insight

on:
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é
  schedule:
    - cron: '*/5 * * * *'  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

jobs:
  check-insight:
    runs-on: ubuntu-latest
    steps:
      - name: Run script
        env:
          POSTHOG_URL: https://posthog.wachanga.com/      # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL
          INSIGHT_ID: 'F293UKTa'                           # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ ID —Å–≤–æ–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
          API_KEY: ${{ secrets.API_KEY }}            # –ù–µ –º–µ–Ω—è–π ‚Äî –±—É–¥–µ—Ç –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  # –ù–µ –º–µ–Ω—è–π
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  # –ù–µ –º–µ–Ω—è–π
              run: |
        pip3 install requests

        python3 -c "
        import requests
        import json
        import os
        from datetime import datetime

        POSTHOG_URL = os.getenv('POSTHOG_URL')
        INSIGHT_ID = os.getenv('INSIGHT_ID')
        API_KEY = os.getenv('API_KEY')
        TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
        TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

        STATE_FILE = '/tmp/state.json'

        def send_telegram(text):
            url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
            data = {'chat_id': TELEGRAM_CHAT_ID, 'text': text, 'parse_mode': 'HTML'}
            try:
                requests.post(url, data=data)
            except:
                pass

        try:
            url = f'{POSTHOG_URL}/api/projects/@current/insights/{INSIGHT_ID}/'
            headers = {'Authorization': f'Bearer {API_KEY}'}
            params = {'refresh': 'true'}
            response = requests.get(url, headers=headers, params=params)

            if response.status_code != 200:
                send_telegram('üî¥ –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PostHog')
                exit()

            data = response.json()
            series = data['result'][0]['data']
            if not series:
                send_telegram('üü° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≥—Ä–∞—Ñ–∏–∫–µ')
                exit()

            current_value = series[-1]

            last_value = None
            if os.path.exists(STATE_FILE):
                try:
                    with open(STATE_FILE, 'r') as f:
                        last_value = json.load(f)['value']
                except:
                    pass

            with open(STATE_FILE, 'w') as f:
                json.dump({'value': current_value, 'time': datetime.now().isoformat()}, f)

            if last_value is None:
                print('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ.')
                exit()

            if current_value < last_value * 0.9:
                percent_drop = (1 - current_value / last_value) * 100
                message = f'üö® <b>–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏!</b>%0A%0Aüìâ –£–ø–∞–ª–∞ –Ω–∞ <b>{percent_drop:.1f}%</b>%0Aüî¢ –ë—ã–ª–æ: {last_value:.3f}%0Aüî¢ –°—Ç–∞–ª–æ: {current_value:.3f}%0Aüïí {datetime.now().strftime(\"%H:%M:%S\")}'
                send_telegram(message)

        except Exception as e:
            send_telegram(f'üî¥ –û—à–∏–±–∫–∞: {str(e)}')
        "
